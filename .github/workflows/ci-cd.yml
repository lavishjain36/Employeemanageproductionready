name: CI/CD Pipeline with Code Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-and-analyze:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: ./mvnw clean test
      
    - name: Generate JaCoCo coverage report
      run: ./mvnw jacoco:report
      
    - name: Upload JaCoCo coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Run SpotBugs analysis
      run: ./mvnw spotbugs:check
      
    - name: Generate SpotBugs HTML report
      run: ./mvnw spotbugs:report
      
    - name: Run PMD analysis
      run: ./mvnw pmd:check
      
    - name: Generate PMD HTML report
      run: ./mvnw pmd:pmd
      
    - name: Run Checkstyle
      run: ./mvnw checkstyle:check
      
    - name: Generate Checkstyle HTML report
      run: ./mvnw checkstyle:checkstyle
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          target/surefire-reports/
          target/site/jacoco/
          target/spotbugsXml.xml
          target/pmd.xml
          target/checkstyle-result.xml
        
    - name: Upload HTML reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: html-reports
        path: |
          target/site/
          target/spotbugs.html
          target/pmd.html
          target/checkstyle.html

  generate-excel-report:
    runs-on: ubuntu-latest
    needs: test-and-analyze
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas openpyxl jinja2
        
    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        name: test-results
        path: ./test-results
        
    - name: Generate Excel report
      run: |
        python scripts/generate_excel_report.py
        
    - name: Upload Excel report
      uses: actions/upload-artifact@v3
      with:
        name: excel-report
        path: reports/code-analysis-report.xlsx

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test-and-analyze
    if: github.ref == 'refs/heads/main' && needs.test-and-analyze.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Build application
      run: ./mvnw clean package -DskipTests
      
    - name: Build Docker image
      run: docker build -t empcursodemo:${{ github.sha }} .
      
    - name: Upload Docker image
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: empcursodemo:${{ github.sha }}

  notify:
    runs-on: ubuntu-latest
    needs: [test-and-analyze, generate-excel-report, build-and-deploy]
    if: always()
    
    steps:
    - name: Notify on failure
      if: needs.test-and-analyze.result == 'failure' || needs.build-and-deploy.result == 'failure'
      run: |
        echo "Pipeline failed! Check the logs for details."
        exit 1
        
    - name: Notify on success
      if: needs.test-and-analyze.result == 'success' && needs.build-and-deploy.result == 'success'
      run: |
        echo "Pipeline completed successfully!"
        echo "Reports generated and artifacts uploaded."
